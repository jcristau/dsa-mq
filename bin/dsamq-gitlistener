#!/usr/bin/python

import ConfigParser
import logging
from optparse import OptionGroup, OptionParser
import os
import subprocess
import sys
import time

from dsa_mq.connection import Connection

default_cfg = os.path.expanduser('~/.pubsub.conf')

# Get comand line args
description = """Designed for simple listener for message
on an MQ topic, for example from a git commit hook.

Will do git pull on reception of message."""

epilog = """If you have not talked to DSA about credentials,
This will not work.  Please go do so now.
"""

parser = OptionParser(description=description,
                      epilog=epilog,
                      version='0.1')

parser.add_option("-d", "--debug",
                  action="store_true", default=False,
                  help="turn on debug output")

cfg = OptionGroup(parser, "Configuration options",
"""Defaults to trying to read from ~/.pubsub.conf.
Overridden by command line arguments.
Standard INI format.""")
cfg.add_option("-c", "--config",
               default=default_cfg,
                  help="config file for app")
cfg.add_option("-s", "--section",
               default='DEFAULT',
               help="section in config file")
cfg.add_option("-g", "--git",
               help="location of git repo")
parser.add_option_group(cfg)

auth = OptionGroup(parser, "Authentication Options",
                   "You should put these in the config file instead")
auth.add_option("-u", "--username",
                  help="authentication username")
auth.add_option("-p", "--password",
                  help="authentication password")
auth.add_option("-v", "--vhost",
                  help="vhost for connection")
parser.add_option_group(auth)

msging = OptionGroup(parser, "Message Options",
                     "How to listen for messages")
msging.add_option("-t", "--topic",
                  help="topic to listen on")
msging.add_option("-e", "--exchange",
                  help="exchange to bind to")
msging.add_option("-q", "--queue",
                  help="queue to listen on")
parser.add_option_group(msging)

(options, args) = parser.parse_args()

# And config file defaults
config = ConfigParser.ConfigParser()
config.read(options.config)

# Set up logging
FORMAT = "[%(asctime)-15s] [%(levelname)s] %(message)s"
# Simple coloured output

logging.addLevelName(logging.DEBUG,   "\033[1;32m %s \033[1;m" % logging.getLevelName(logging.DEBUG))
logging.addLevelName(logging.INFO,    "\033[1;36m %s  \033[1;m" % logging.getLevelName(logging.INFO))
logging.addLevelName(logging.WARNING, "\033[1;33m%s\033[1;m" % logging.getLevelName(logging.WARNING))
logging.addLevelName(logging.ERROR,   "\033[1;31m %s \033[1;m" % logging.getLevelName(logging.ERROR))

lvl = logging.INFO
if options.debug:
    lvl = logging.DEBUG

logging.basicConfig(format=FORMAT, level=lvl)

LOG = logging.getLogger(__name__)

# Sanity checks
def get_value(opt):

    ret = None
    try:
        ret = config.get(options.section, opt)
    except ConfigParser.NoOptionError:
        pass

    return getattr(options, opt) or ret

for item in ['username', 'password', 'vhost',
             'exchange', 'topic', 'queue', 'git']:
    if get_value(item) is None:
        print("%s cannot be absent!" % item)
        sys.exit(1)

conf = {
    'rabbit_userid': get_value('username'),
    'rabbit_password': get_value('password'),
    'rabbit_virtual_host': get_value('vhost'),
    'rabbit_hosts': ['pubsub02.debian.org', 'pubsub01.debian.org'],
    'use_ssl': False
}

def git_pull(message):
    last_update = time.time()
    LOG.debug("Got commit message at %s" % last_update)
    curdir = os.getcwd()
    os.chdir(get_value('git'))
    command = ['/usr/bin/git', 'pull']
    try:
        subprocess.check_call(command)
    except:
        LOG.error('%s failed:', ' '.join(command))
    else:
        LOG.debug('%s finished with ret: 0' % ' '.join(command))
    os.chdir(curdir)
    LOG.debug(message)

conn = Connection(conf=conf)
conn.declare_topic_consumer(get_value('topic'),
                            callback=git_pull,
                            queue_name=get_value('queue'),
                            exchange_name=get_value('exchange'),
                            ack_on_error=False)

try:
    conn.consume()
except KeyboardInterrupt:
    conn.close()
    sys.exit(0)
